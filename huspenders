#!/bin/zsh

# Start a new Haskell project named $1.
# It's an executable (not a library) so that `cabal run` is set up, because
# that's my most common type of project.

set -e

template_root="$(dirname "${0:A}")"/templates

usage() {
  print "Usage: huspenders [--hspec] packagename"
  exit 64
}

if [[ -z "$1" ]]; then
  usage
fi

autoload -Uz colors && colors

cabal_init_executable(){
  fullname=$(finger $(whoami) | awk '/Name:/ {print $4" "$5}')

  cabal init \
    --non-interactive \
    --package-name "$1" \
    --license MIT \
    --synopsis "This is a required synopsis" \
    --is-executable \
    --main-is="Main.hs" \
    --author="$fullname" \
    --source-dir=src
}

# Replace {PACKAGENAME} with the real package name in the given file
compile_template(){
  from="${template_root}/$1"
  to=$2
  sed "s/{PACKAGENAME}/$packagename/g" "$from" >> "$to"
}

git_init() {
  git init --quiet
  cat >> .gitignore <<GITIGNORE
.cabal-sandbox/
cabal.sandbox.config
dist/
GITIGNORE

  git commit --allow-empty --message "Initial Commit"
}

install_and_precompile(){
  generate_hspec=$1

  cabal update > /dev/null

  if $generate_hspec; then
    cabal install --enable-tests
    cabal test > /dev/null
  else
    cabal install
  fi
  cabal run > /dev/null
}

# Expose this package as a library
add_library_to_cabalfile() {
  compile_template library-cabalfile "$cabalfile"
}

add_hspec() {
  packagename=$1
  cabalfile=$2

  mkdir test

  echo "{-# OPTIONS_GHC -F -pgmF hspec-discover #-}" > test/Spec.hs
  add_library_to_cabalfile
  compile_template hspec "$cabalfile"
  compile_template PackageSpec.hs "test/${packagename}Spec.hs"
}

if [[ "$1" == "--hspec" ]];  then
  generate_hspec=true
  shift
else
  generate_hspec=false
fi

packagename=$1
cabalfile="${packagename}.cabal"
bin_setup=bin/setup

if $generate_hspec; then
  print "Cool, creating a project ${fg_bold[green]}with HSpec${reset_color} named ${fg_bold[green]}${packagename}${reset_color}"
else
  print "Cool, creating a project named ${fg_bold[green]}${packagename}${reset_color}"
fi

mkdir "$packagename"
cd "$packagename"

cabal sandbox init > /dev/null
cabal_init_executable "$packagename" > /dev/null
# Strip whitespace, because cabal doesn't
sed -i '' 's/ +$//g' *.cabal

mkdir -p bin/
cat >> "$bin_setup" <<BIN_SETUP
#!/bin/sh

cabal sandbox init
BIN_SETUP

cat >> README.md <<README
# ${packagename}

To install dependencies:

    bin/setup
README

chmod +x "$bin_setup"

if $generate_hspec; then
  add_hspec "$packagename" "$cabalfile"
  echo "cabal install --enable-tests" >> "$bin_setup"
  cat >> README.md <<README

To run the tests:

    cabal test
README
else
  echo "cabal install" >> "$bin_setup"
fi

compile_template Main.hs "src/Main.hs"
compile_template Package.hs "src/${packagename}.hs"

if ! git rev-parse --git-dir &>/dev/null; then
  git_init
fi

install_and_precompile $generate_hspec

print "${fg_bold[green]}cd $packagename, edit src/Main.hs, run it with \`cabal run\`${reset_color}"
